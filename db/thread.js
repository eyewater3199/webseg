const _0x3fb2=['https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.7.0/dist/tf.min.js','expandDims','183215fhMFyj','shape','loadLayersModel','13vLxqwg','1037299gFaVrZ','2cyWZjt','predict','55913wDyqTx','tidy','minimum','1dANFHv','resizeBilinear','mean','21662MjIasG','1XgZZFI','scalar','greater','dispose','215341OYfVsO','Can\x27t\x20load\x20the\x20model:\x20','../db/kt_seg.json','data','412055MJPpDs','74521buOhey'];const _0x56d9=function(_0x15de24,_0x798209){_0x15de24=_0x15de24-0x1c6;let _0x3fb2cd=_0x3fb2[_0x15de24];return _0x3fb2cd;};const _0x43d262=_0x56d9;(function(_0x30e8c6,_0x3017e9){const _0x2605f6=_0x56d9;while(!![]){try{const _0xd60779=parseInt(_0x2605f6(0x1d6))+-parseInt(_0x2605f6(0x1db))*parseInt(_0x2605f6(0x1ce))+-parseInt(_0x2605f6(0x1d2))+parseInt(_0x2605f6(0x1d9))*-parseInt(_0x2605f6(0x1c9))+parseInt(_0x2605f6(0x1dd))+-parseInt(_0x2605f6(0x1d3))*-parseInt(_0x2605f6(0x1ca))+parseInt(_0x2605f6(0x1da))*parseInt(_0x2605f6(0x1c6));if(_0xd60779===_0x3017e9)break;else _0x30e8c6['push'](_0x30e8c6['shift']());}catch(_0xa074d3){_0x30e8c6['push'](_0x30e8c6['shift']());}}}(_0x3fb2,0x3752d),importScripts(_0x43d262(0x1d4)));const MODEL_PATH=_0x43d262(0x1d0),MODEL_SIZE=0x80,BINARYIZATION_THRESHOLD=tf[_0x43d262(0x1cb)](0.7),HUMAN_RANGE_AVG_THRESHOLD=tf[_0x43d262(0x1cb)](0.05),FLOAT_255=tf[_0x43d262(0x1cb)](0xff);let model;async function segmentate(_0x4f4e99){const _0x382d7e=_0x43d262,_0x598173=tf['tidy'](()=>{const _0xd12b3f=_0x56d9,_0x5ad793=_0x4f4e99['div'](FLOAT_255)[_0xd12b3f(0x1c7)]([MODEL_SIZE,MODEL_SIZE]);return _0x5ad793[_0xd12b3f(0x1d5)](0x0);}),_0x3317fc=await model[_0x382d7e(0x1dc)](_0x598173);if(_0x3317fc){const _0x344c5c=_0x3317fc[_0x382d7e(0x1cc)](BINARYIZATION_THRESHOLD),_0x1147ea=_0x344c5c[_0x382d7e(0x1c8)]()<HUMAN_RANGE_AVG_THRESHOLD?_0x3317fc[_0x382d7e(0x1df)](tf[_0x382d7e(0x1cb)](0x0))['dataSync']():_0x3317fc['dataSync'](),_0x555b7c=_0x3317fc[_0x382d7e(0x1d7)];postMessage({'array':_0x1147ea,'shape':_0x555b7c}),_0x344c5c[_0x382d7e(0x1cd)]();}_0x598173[_0x382d7e(0x1cd)](),_0x3317fc['dispose']();}function predictCallback(_0x14deb6){const _0x1e8a52=_0x43d262;if(model){const _0x222a2c=tf[_0x1e8a52(0x1de)](()=>{const _0x236a56=_0x1e8a52;return tf['tensor'](_0x14deb6[_0x236a56(0x1d1)]['array'],_0x14deb6['data'][_0x236a56(0x1d7)]);});segmentate(_0x222a2c),_0x222a2c['dispose']();}}async function loadModel(_0x5a41cd){const _0x41032e=_0x43d262;try{model=await tf[_0x41032e(0x1d8)](_0x5a41cd),postMessage({'modelIsReady':!![]});}catch(_0x187d07){console['error'](_0x41032e(0x1cf),_0x187d07),postMessage({'modelIsReady':![]});}}loadModel(MODEL_PATH),onmessage=_0x225709=>predictCallback(_0x225709);